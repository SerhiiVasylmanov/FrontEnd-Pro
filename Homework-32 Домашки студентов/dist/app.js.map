{"version":3,"sources":["api.js","Collection.js","StudentsListView.js","NewStudentFormView.js","Controller.js","index.js"],"names":["StudentApi","STUDENT_URL","request","uri","method","data","fetch","this","headers","Accept","Content-type","body","JSON","stringify","undefined","getList","then","res","json","delete","id","create","update","Collection","#list","setList","get","find","item","filter","Promise","resolve","student","newStudent","marks","getMarks","dataset","add","name","push","Object","values","querySelectorAll","map","el","value","BTN_DELETE_SELECTOR","INPUT_SELECTOR","STUDENTS_LIST_SELECTOR","HEADER_SELECTOR","StudentsView","constructor","options","_options","_$el","initList","list","$","on","onFoucsOutInput","bind","onDeleteBtnClick","appendTo","$container","append","e","stopPropagation","target","defaultValue","currentStudent","findStudent","currentStudentId","findStudentId","removeElement","remove","closest","STUDENT_SELECTOR","renderStudents","itemHtml","generateItem","elem","html","renderStudent","replaceWith","appendStudent","isArray","element","array","Array","NewStudentFormView","FORM_BTN_SELECTOR","FORM_SELECTOR","FORM_INPUT_SELECTOR","TRIGGER_SELECTOR","addTrigger","onTriggerClick","preventDefault","thisElem","replaceForm","style","display","form","makeNewStudentForm","parentElement","onSubmitBtnClick","inputValue","val","isEmpty","alert","submit","reset","removeForm","Controller","studentsCollection","renderList","studentsListView","deleteStudent","updateStudent","newFormStudent","onSubmit","newStudentForm","after"],"mappings":"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","file":"app.js","sourcesContent":["class StudentApi {\r\n    static STUDENT_URL = 'https://5dd3d5ba8b5e080014dc4bfa.mockapi.io/students';\r\n\r\n    static request(uri, method, data) {\r\n        return fetch(`${this.STUDENT_URL}${uri}`, {\r\n            method,\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n            },\r\n            body: data ? JSON.stringify(data) : undefined,\r\n        });\r\n    }\r\n\r\n    static getList() {\r\n        return this.request('', 'GET')\r\n            .then(res => res.json())\r\n\r\n    }\r\n\r\n    static delete(id) {\r\n        return this.request(`/${id}`, 'DELETE')\r\n            .then(res => res.json())\r\n    }\r\n\r\n    static create(data) {\r\n        return this.request('', 'POST', { ...data })\r\n            .then(res => res.json())\r\n    }\r\n\r\n    static update(id, data) {\r\n        return this.request(`/${id}`, 'PUT', { ...data })\r\n            .then(res => res.json())\r\n    }\r\n}\r\n","class Collection {\r\n    #list = [];\r\n\r\n    fetch() {\r\n        return StudentApi.getList()\r\n            .then((data) => this.setList(data));\r\n    }\r\n\r\n    setList(data) {\r\n        this.#list = data;\r\n    }\r\n\r\n    getList() {\r\n        return this.#list;\r\n    }\r\n\r\n    get(id) {\r\n        return this.#list.find((item) => item.id == id);\r\n    }\r\n\r\n    delete(id) {\r\n        this.#list = this.#list.filter((item) => item.id !== id);\r\n\r\n        StudentApi.delete(id);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    update(student) {\r\n        const newStudent = {\r\n            marks: this.getMarks(student)\r\n        }\r\n        const id = student.dataset.id\r\n\r\n        StudentApi.update(id, newStudent)\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    add(name) {\r\n        const item = {\r\n            name,\r\n            marks: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        }\r\n\r\n        return StudentApi.create(item)\r\n            .then((res) => {\r\n                this.#list.push(res);\r\n\r\n                return res;\r\n            })\r\n    }\r\n\r\n    getMarks(student) {\r\n        const marks = [];\r\n\r\n        student = (Object.values(student.querySelectorAll('input')))\r\n        student.map((el) => marks.push(el.value))\r\n\r\n        return marks;\r\n    }\r\n}\r\n","const BTN_DELETE_SELECTOR = '.delete';\r\nconst INPUT_SELECTOR = '.input';\r\nconst STUDENTS_LIST_SELECTOR = '.students_list';\r\nconst HEADER_SELECTOR = '.header';\r\n\r\nclass StudentsView {\r\n    constructor(options) {\r\n        this._options = options;\r\n        this._$el = this.initList();\r\n        this.list = [];\r\n    }\r\n\r\n    initList() {\r\n        return $(`<table class=\"students_list\"></table>`)\r\n            .on('focusout', INPUT_SELECTOR, this.onFoucsOutInput.bind(this))\r\n            .on('click', BTN_DELETE_SELECTOR, this.onDeleteBtnClick.bind(this));\r\n    }\r\n\r\n    appendTo($container, el = this._$el) {\r\n        return $container.append(el);\r\n    }\r\n\r\n    onFoucsOutInput(e) {\r\n        e.stopPropagation();\r\n\r\n        e.target.defaultValue = e.target.value;\r\n        const currentStudent = this.findStudent(e.target);\r\n\r\n        this._options.update(currentStudent);\r\n    }\r\n\r\n    onDeleteBtnClick(e) {\r\n        e.stopPropagation();\r\n\r\n        const currentStudentId = this.findStudentId(e.target);\r\n\r\n        this._options.delete(currentStudentId);\r\n    }\r\n\r\n    removeElement(id) {\r\n        this._$el.find(`[data-id=\"${id}\"]`).remove();\r\n    }\r\n\r\n    findStudent(e) {\r\n        return e.closest(STUDENT_SELECTOR);\r\n    }\r\n\r\n    findStudentId(student) {\r\n        const currentStudent = this.findStudent(student);\r\n\r\n        return currentStudent.dataset.id;\r\n    }\r\n\r\n    setList(data) {\r\n        this.list = data;\r\n    }\r\n\r\n    renderStudents(item) {\r\n        const itemHtml = item.map((elem) => this.generateItem(elem))\r\n        this._$el.html(itemHtml)\r\n    }\r\n\r\n    renderStudent(student) {\r\n        this._$el.find(`[data-id=\"${student.id}\"]`).replaceWith(student);\r\n    }\r\n\r\n    appendStudent(res) {\r\n        const newStudent = this.generateItem(res);\r\n\r\n        this.appendTo($(STUDENTS_LIST_SELECTOR), newStudent);\r\n    }\r\n\r\n    generateItem(item) {\r\n        if (!!item.marks) {\r\n            return `<tr class=\"student\" data-id = ${item.id}>\r\n                    <td class=\"name\">${item.name}</td>\r\n                    ${this.isArray(item.marks).map(element => {\r\n                return `<td>\r\n                                    <input\r\n                                    type=\"number\"\r\n                                    class=\"input\"\r\n                                    value=\"${element}\">\r\n                                </td>`\r\n            })}\r\n                    <td class=\"delete\">X</td>\r\n                </tr>`\r\n        }\r\n    }\r\n\r\n    isArray(array) {\r\n        if (!Array.isArray(array)) {\r\n            return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        } else {\r\n            return array;\r\n        }\r\n    }\r\n}","class NewStudentFormView {\r\n    static FORM_BTN_SELECTOR = '#addStudentBtn';\r\n    static FORM_SELECTOR = '#student-form';\r\n    static FORM_INPUT_SELECTOR = '#studentNameInput';\r\n    static TRIGGER_SELECTOR = '#add-form';\r\n\r\n    constructor(options) {\r\n        this._options = options;\r\n    }\r\n\r\n    addTrigger() {\r\n        return $(`<span id=\"add-form\">+</span>`)\r\n            .on('click', this.onTriggerClick.bind(this));\r\n    }\r\n\r\n    onTriggerClick(e) {\r\n        e.preventDefault();\r\n\r\n        const thisElem = e.target;\r\n\r\n        this.replaceForm(thisElem);\r\n        thisElem.style.display = \"none\";\r\n    }\r\n\r\n    replaceForm(element) {\r\n        const form = this.makeNewStudentForm()[0];\r\n\r\n        element.parentElement.append(form);\r\n    }\r\n\r\n    makeNewStudentForm() {\r\n        return $(`\r\n                <form id=student-form>\r\n                    <input type=\"text\" id=\"studentNameInput\"/>\r\n                    <button id=\"addStudentBtn\">Add</button>\r\n                </form>\r\n                `)\r\n            .on('submit', this.onSubmitBtnClick.bind(this));\r\n    }\r\n\r\n    onSubmitBtnClick(e) {\r\n        e.preventDefault();\r\n\r\n        const inputValue = $(NewStudentFormView.FORM_INPUT_SELECTOR).val();\r\n\r\n        if (this.isEmpty(inputValue)) {\r\n            alert('Enter name student');\r\n        } else {\r\n            this._options.submit(inputValue);\r\n            $(NewStudentFormView.FORM_SELECTOR)[0].reset();\r\n            this.removeForm(e);\r\n        }\r\n    }\r\n\r\n    removeForm(e) {\r\n        e.target.remove();\r\n        $(NewStudentFormView.TRIGGER_SELECTOR)[0].style.display = '';\r\n    }\r\n\r\n    isEmpty(value) {\r\n        return !value\r\n    }\r\n}\r\n","const STUDENT_SELECTOR = '.student';\r\n\r\nclass Controller {\r\n    constructor($container) {\r\n        this.$container = $container;\r\n\r\n        this.studentsCollection = new Collection();\r\n        this.studentsCollection.fetch()\r\n            .then(() => this.renderList());\r\n\r\n        this.studentsListView = new StudentsView({\r\n            delete: (id) => this.deleteStudent(id),\r\n            update: (student) => this.updateStudent(student),\r\n        });\r\n\r\n        this.newFormStudent = new NewStudentFormView({\r\n            submit: (name) => this.onSubmit(name)\r\n        });\r\n\r\n        this.studentsListView.appendTo(this.$container);\r\n    }\r\n\r\n    deleteStudent(id) {\r\n        this.studentsCollection.delete(id)\r\n            .then(() => this.studentsListView.removeElement(id))\r\n    }\r\n\r\n    updateStudent(student) {\r\n        this.studentsCollection.update(student)\r\n            .then(() => this.studentsListView.renderStudent(student))\r\n    }\r\n\r\n    onSubmit(name) {\r\n        this.studentsCollection.add(name)\r\n            .then(res => this.studentsListView.appendStudent(res))\r\n    }\r\n\r\n    renderList() {\r\n        this.studentsListView.renderStudents(this.studentsCollection.getList());\r\n        this.newStudentForm = this.newFormStudent.addTrigger();\r\n        this.$container.after(this.newStudentForm[0]);\r\n    }\r\n}\r\n","\"use strict\"\r\n\r\n$(() => new Controller($('#root')));\r\n"]}